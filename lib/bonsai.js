import { db } from "@/lib/firebase";
import { doc, getDoc, updateDoc, deleteDoc } from "firebase/firestore";

export const updateBonsaiStatus = async (bonsaiId, action) => {
  try {
    const bonsaiRef = doc(db, "bonsai", bonsaiId);
    const bonsaiSnap = await getDoc(bonsaiRef);

    if (bonsaiSnap.exists()) {
      const bonsaiData = bonsaiSnap.data();
      let { waterLevel, fertilizerLevel, sunlight, healthStatus, growthStage, isSick } = bonsaiData;

      isSick = isSick || false;  // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ isSick ‡πÄ‡∏õ‡πá‡∏ô false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤

      // üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏î‡∏ô‡πâ‡∏≥, ‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢, ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏ß‡πâ)
      if (action === "water") {
        waterLevel = Math.min(waterLevel + 10, 100);
        fertilizerLevel = Math.max(fertilizerLevel - 2, 0);
        sunlight = Math.max(sunlight - 1, 0);
      } else if (action === "fertilize") {
        fertilizerLevel = Math.min(fertilizerLevel + 10, 100);
        waterLevel = Math.max(waterLevel - 5, 0);
      } else if (action === "addSunlight") {
        sunlight = Math.min(sunlight + 5, 100);
        waterLevel = Math.max(waterLevel - 3, 0);
      } else if (action === "upgrade") {
        if (growthStage >= 3 && healthStatus === "‡∏î‡∏µ‡∏°‡∏≤‡∏Å") {
          growthStage += 1;
        }
      } else if (action === "heal") {
        if (isSick) {
          isSick = false;
          healthStatus = "‡∏î‡∏µ";
        }
      }

      // üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏£‡∏Ñ: ‡∏ô‡πâ‡∏≥, ‡∏õ‡∏∏‡πã‡∏¢, ‡πÅ‡∏™‡∏á ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 20% ‚Üí ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡πà‡∏ß‡∏¢
      if (waterLevel < 20 || fertilizerLevel < 20 || sunlight < 20) {
        healthStatus = "‡πÅ‡∏¢‡πà";
        if (Math.random() < 0.3 && !isSick) {
          isSick = true;
          healthStatus = "‡∏õ‡πà‡∏ß‡∏¢";
        }
      } else if (waterLevel > 80 && fertilizerLevel > 80 && sunlight > 80) {
        healthStatus = "‡∏î‡∏µ‡∏°‡∏≤‡∏Å";
      } else {
        healthStatus = isSick ? "‡∏õ‡πà‡∏ß‡∏¢" : "‡∏î‡∏µ";
      }

      // üîÑ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
      if (healthStatus === "‡∏î‡∏µ‡∏°‡∏≤‡∏Å" && growthStage < 5 && !isSick) {
        growthStage += 1;
      }

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô Firestore
      await updateDoc(bonsaiRef, {
        waterLevel,
        fertilizerLevel,
        sunlight,
        healthStatus,
        growthStage,
        isSick,
        lastUpdated: new Date(),
      });

      console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! [${action}]`);
      return true;
    } else {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      return false;
    }
  } catch (error) {
    console.error("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ:", error);
    return false;
  }
};

export const deleteBonsai = async (bonsaiId) => {
  try {
    const bonsaiRef = doc(db, "bonsai", bonsaiId);
    await deleteDoc(bonsaiRef);
    console.log(`‚úÖ ‡∏•‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! [ID: ${bonsaiId}]`);
    return true;
  } catch (error) {
    console.error("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ:", error);
    return false;
  }
};
